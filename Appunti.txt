Link ai materiali del corso:
https://github.com/ITIS-Zuccante/fullstack-course4

Link alla versione finale del progetto:
https://jhu-ep-coursera.github.io/fullstack-course4/examples/Lecture63/after/

La versione online, fatta con Angular, è all'url:
https://www.davidchuschinabistro.com/

Creazione sito in GitHub (VA AGGIORNATO)
Si sfruttano le GitHub pages:
- dal sito GitHub, nella pagina del repository click su (ingranaggio) Settings
  - scorrere in basso fino a GitHub Pages e creare le pagine accettando i default;
    GitHub crea un sito con url https://alec58.github.io/Coursera-test/
	e mette i file relativi nel branch "gh-pages" del repository.
	In GitHub Desktop ho reso attivo il branch gh-pages (serve?)
  - nella dir radice (locale) del repository creare una dir (es. "Site") e in
    questa dir creare index.html: il file si vedrà in Internet
	all'url https://alec58.github.io/CourseraClientWebDev/site/
	... e in "site" si può fare il resto del sito
	
browser-sync
Serve per evitare di dover ricaricare manualmente le pagine sul browser
dopo le modifiche.
Da cmd portarsi sulla dir del sito (C:\Users\acazz\Documents\GitHub\Coursera-test\site) e dare il comando
browser-sync start --server --directory --files "*"

Da adesso in poi, non appena si salvano le modifiche ai file di questa
dir (e sottodir), nel browser le si vedranno automaticamente, senza
dover ricaricare la pagina.

Risorse:
stackoverflow

https://jsfiddle.net/
permette di scrivere HTML, CSS e plain JS, vedere in tempo reale
il risultato e ottenere un link di quanto fatto da poter condividere

https://codepen.io/

https://css-tricks.com/

#01 What is HTML?
HyperText: hypertext is text which contains links to other texts
Markup: markup means to mark something up, to annotate allo scopo di dare informazioni sul contenuto che viene marcato
Language: HTML usa un linguaggio formato da marcatori ("tags") che racchiudono informazioni indicandone il tipo (es. titolo, paragrafo di testo, immagine ...)
HTML is human readable. So these tags look like instructions for a document structure.
language basically implies
that it has its own syntax meaning there's a right and a wrong way to code it. 
Html also has it's own semantics which means tag
names can mean something either to machines or to humans
HTML provides the structure which means what components
does the HTML document have
Note that that does not tell you anything about how these components are visually
laid out, what they look like, what color they are, what font size they are.
It only tells you what are the components
The color and style is the role of CSS.
So colors, layouts, font style,
font sizes, in other words any stylistic types of things
avaScript, it's job is to provide behavior, provide functionality
Guerra dei browser; standard; W3C; WHATWG
Validazione
Browser statistics (w3schools)

Anatomy of an HTML Tag
Tag, attributi

Basic HTML Document Structure
doctype (usarlo SEMPRE): quirk mode e standard mode
html/head(metadata): charset title/body(contenuto)
i tag devono essere correttamente nidificati
il browser interpreta il codice html sequenzialmente, dall'inizio verso la fine del file.

05 HTML Content Models
The term content model refers to the full behavior the browser
applies to the elements belonging to that content model,
and to the nesting rules of those elements: in other words, which elements are allowed to be nested inside which other elements
Prior to HTML5 specification, HTML elements were either block level or
inline elements.
HTML5 split these two content models into seven models
block-level o inline element
Block level elements render to begin on the new line by default
Block-level elements are allowed to contain inline or
other block-level elements within them.
This is in contrast to inline elements, which render on the same line by default
Inline elements also have a restriction that they can only
contain other in line elements.
In other words, an inline element cannot have as part of its content a block level element.
Block-level elements roughly translate into the new HTML5 category of flow content, and inline elements roughly translate into the HTML5 category of phrasing content. 
Elementi generici: div e span
The div element is your most generic block-level element, and
the span is your super generic, inline element. 
the new line characters (nel codice!) that follow the div tags
make absolutely no difference to the html page and how it renders
1 o più spazi = 1 spazio

06 Heading Elements (and some new HTML5 semantic comments)
what does semantic html element mean?
Well, a semantic html element is an element that implies some
meaning to the content.
In other words, it's an element that tells you something about the content,
whether its importance, whether it's a little bit of its description,
it basically hints to you to that meaning.
Now the reason that's important is because us, humans, and
machines can understand the meaning of that content surrounded by a semantic
tag much better than if we just surround it with some tag that doesn't really
tell us anything other than this is some sort of a division within the document
First, even though their (dei tag h) default rendering in the browser appears to give them
visual distinction, these should not be used for styling.
These elements are only meant to convey structure of your HTML page, nothing more
and specifically the h1 tag,
that it is of utmost importance to use it and that it should contain the wording,
which truly conveys the central topic of the rest of the content
New HTML5 semantic tags:
the header tag basically contains some header information about the page.
So usually, it consists of company logo, some tagline, sometimes, navigation.
Actually, often, navigation is contained within the header as well
The nav tag signifies some content that is used for navigation within our website
we have our familiar h1 tag and
you should absolutely always have that. 
section / article
An aside tag is basically an element that communicates that there's something
that is inside of this element that is related to the main content of the page,
but not as direct a relationship as the main content.
And finally, we have the footer tag, which, just like it sounds,
has the footer information in it.
Now, the thing to note about all of these tags is they're all block level elements
So as far as we're concerned,
visually we might as well have just used the div tags everywhere.
However, if you look at the code, it is obvious how much easier it is to read and
understand what's going on structurally in this HTML page
That's the power of the semantic elements.
They inherently convey some meaning

07 Lists
lists are an incredibly useful HTML structure that allows you to
group related content. 
it's totally natural that lists appeal to us as an organization tool
ul / ol /like; sublist (livelli)

08 HTML Character Entity References
Since HTML uses certain characters for its syntax, we need a way to differentiate
between those characters as HTML and those same characters as content
Specifically, there are three characters that should always be escaped to make
sure they don't cause rendering issues: > < &
you should use the HTML entity (&lt; &gt; &amp;)
&copy; &quote;
&nbsp; NB: NON usarlo per mettere più spazi! -> fare uno span e stilizzarlo usando i margini

09 Creating Links
tag a attr href
Links pretty much what makes the web what it is
- internal links
- external links usually starts with http:// e legato a _blank
It's also a very good idea to always specify a title attribute for the a tag.
The title attribute is used by the screen readers
that help the visually impaired people get through the web page
Another type of link that is extremely important to know about is a fragment identifier
It's a # followed by some name (fa riferimento a id="nome")
While fragment identifiers are very useful in order to jump to different parts of
the same page, recently they have become even more important as they're used for
navigation within the SPA or Single Page Applications.

10 Displaying Images
img /src it's a really good idea to always specify the width and the height
img tag is an inline element
And if this images take time to load, the page might appear jumpy.
So this is actually the primary reason why you would want to use the width and
the height of the image
You want to tell the browser to reserve this space and
to visually partition your page such that it knows that there should be something
going on in there even if it takes time to load it
And remember to always specify width and height of the image tag whenever possible,
because without it, it may break your layouts. 

11 Power of CSS
You need to style your content in a way that's pleasing and useful to the user.
The use of color, positioning, size, among other things, is all part of that.
Cascading style sheets, or CSS,
is the technology that provides the styling capability
csszengarden.com

12 Anatomy of a CSS Rule
CSS works by associating rules with HTML elements.
These rules govern how the content of specified elements should be displayed
A CSS rule consists of selector. The selector is followed by open and close curly braces. Inside of those braces, we have CSS declaration.
And it consist of two parts, the property and the value
Now, the collection of these CSS rules is what's called a style sheet
Now, in later lecture we'll talk about where CSS styles should really go for
a real world website.
But for now, for convenience sake, we'll just put it straight in the head part of the document
Every browser comes with some default styles that it applies to different HTML
elements

13 Element, Class, and ID Selectors
CSS selectors are used to determine which HTML element, or set of elements,
to apply the CSS declarations to.
The browser uses its selector API to traverse the DOM or
Document Object Model, and pick out the elements matching the selector.
Now crafting a selector is a great skill to have and not only for
styling using CSS.
That's because a lot of JavaScript libraries out there
use the browser selector API to attach behavior and data to HTML elements
In this lecture, we're going to talk about three different types of selectors,
element, class, and id selector.
the element selector is just you specifying the element name
the class selector is specified with a dot and the name of the class
The class selector does require a little bit of a change to your HTML document
in that each element that you want that class applied to
has to have a attribute class equal to the class name
Note the differences between the way you define a class and
then the way you use the class.
You define the class always with a dot in front of a name.
There cannot be any space between the dot and
the name of the class in case no space between the dot and the word blue.
However, when you use the class, you don't use the dot in its name,
you just use its name
The way you specify an id selector is by specifying the value of an id
of an element within your HTML document, preceded by a pound sign.
So the name is a value of some id within our HTML document
the id selector is defined with a pound sign followed
by the value of an id within your HTML document.
And again, you can not have any space between the two.
But when you use it the pound goes away,
it's just the actual value of the id itself
Now in order to write more efficient rules,
CSS allows us to group several selectors into one CSS rule (con la virgola)

14 Combining Selectors
Combining Selectors is a very powerful technique that allows you to more
precisely target dumb elements
element with class selector (p.classe)
child selector (elPadre > elFiglio - si legge da dx a sx: seleziona tutti gli elementi del tipo specificato che sono figli diretti di un padre)
descendant selector (elPadre elSotto - si legge da dx a sx: seleziona tutti gli elementi del tipo specificato che sono discendenti di un padre)
the way you apply multiple classes to an element
is just by listing them in the class attribute with a space between them
So the way we could specify that, it's just to say, .highlight.mainpoint,
that is to say that an element that has highlight class and also has
a mainpoint class assigned to it should be  formattato secondo la regola ...

15 Pseudo-Class Selectors
Pseudo-class selectors address targeting only the structures that can be targeted by simple combinations of regular selectors, or
targeting the ability to style based on user interaction with the page.
For example, we would want the styling of an element to change if the user hovers or moves their mouse over that element
The way you specify pseudo-class selector, is by specifying some selector
that we all ready know about with a colon and a predefined pseudo-class name
In this lecture we're going to cover five of them.
The first four link, visited, hover, and
active are pretty basic and is used very, very often.
The last pseudo-class will cover nth-child is a fairly powerful pseudo-class and
can get pretty complicated, but
its basic uses are fairly straight forward
And the first thing I'd like to do is I'd like to style this unordered list
as a menu.
It's a pretty common practice to take an unordered list and style it as a menu
The first thing we want to do is target these list items.
So the way we're going to do this is by using our descendant selector by saying
header li, and we'll turn off the bullet points by saying list-style: none
The next task is to style the links that are sitting inside the li elements and
to make them look like buttons.
However styling links is not exactly as straight forward as styling a regular
element, and that's because links have states.
And these states can be expressed using our pseudo-classes
So here we're targeting two states.
One is a's being a link that it is.
And another one a visited
we want them (i tag a) to block level element
and give it a width of 200 pixels (e funziona perghé sono block el.)
However we're not done because what we would like to do is
on the user hovering over these buttons, besides changing the cursor to a pointer,
I'd like to have some sort of interaction in the style and
kind of show the user that they're hovering over these buttons.
So in order to do that I have to define two more states of the link.
One is a hover and the other a active. 
hover is exactly what it sounds
An active is that state when the user actually clicks on the element but
hasn't yet released his click
In it's simplest form, the nth child pseudo-selector allows you to
target a particular element within a list.
For example I'd like to target this Facebook fan page link

16 Style Placement
Your choice for placing styles in one versus another place doesn't only affect
how reusable the styles are, but
it also affects which style declarations override other style declarations
we've been specifying all of our styles
inside the style tag that sits inside of the head tag of our HTML document. 
you could specify a CSS style directly on the element by providing
the style attribute
This is called inline styling, and as you might have guessed,
this is the least reusable way of styling elements there is
For that reason, this is the least preferred method of styling, and
you should really try to stay as far away from this as possible
However, what happens if I have multiple pages in my website and
I want them to look consistent?
Which means specifying the styles inside the head tag over one particular HTML page
is really not going to help me with the others.
That means I really need some sort of other way to specify styles that
are external to the HTML page and kind of link them back in into my HTML page
Well, this is what external style sheets are all about.
And you can see that we're specifying one here with a tag called link,
and we're telling the browser that it's the style sheet and
its location using the familiar href attribute
External style sheets are just styles with lists of CSS rules.
 in a real-world website,
you almost always want all your styles to be external to your HTML page. 
If you're trying to overwrite styles that are external to your HTML page and
you have no control over, it's better to create your own external CSS file, and
then specify it below the external CSS file that you have no control over. 

17 Conflict Resolution
Cascading is a fundamental feature of CSS.
It's an algorithm defining how to combine properties values originating from
different sources.
Origin: the last declaration wins
The next concept we're going to take a look at is inheritance.
And it's a pretty simple concept.
The basic idea is that you have the document object model tree.
And if you specify some CSS property on some element, all the children and
grandchildren and so on and so on of that element will also inherit that
property without you having to specify the property for each and every element
it happens to be a very powerful technique as well.
It allows me to specify one rule and
have all the children of the target element inherit that rule. 
It's a very common practice to specify some declarations for the body tag and
the reason is obvious.
Body is the top element in our HTML as far as the view port is concerned. 
Next, let's talk about the concept of specificity.
most specific selector combination wins.
You can think of specificity of your selectors as keeping a score.
The selectors with the highest score win. 
The most specific targeting that exists in CSS doesn't
actually use any selectors at all and that is the style attribute on an element
Next is specificity value, comes the ID, then the class or pseudo-class, and
then the number of elements that are used in your selected combination. 
There's one more concept that I'd like to show you.
And that is a concept of overriding all these rules taken all together with
the !important. 
So avoid using important unless you absolutely have to

18 Styling Text
font-family
So what you usually put in the font-family is the value is combinations of fonts.
And the reason you put not just one font, but a few fonts is because
when you specify font-family in this way, you're relying on the client's computer,
you're relying on the user's computer to have that font installed.
And it's possible that a particular font will not be installed on the user's
computer, so you want to provide some options, and at the very least, you want
to provide whether you want a serif type of font, or sans-serif type of font. 
color
font-style
font-weight
font size
Now don't confuse this with points, these are pixels.
Points are used in print when you do Microsoft Word or something like that, but
not on screen. On screen you use pixels.
Pixels are what's considered absolute unit of measurement for size.
However, they do have a bit of a relative component to them.
Pixels are relative to the viewing device.
For low DPI or low dots per inch devices, one pixel is one device pixel dot of the display.
For printers and high-resolution screens, one pixel implies multiple device pixels.
Point is, higher DPI devices will give you sharper text, because for every
pixel that it's drawing, it's actually drawing multiple pixels on the device.
With all that said, pixels is still considered an absolute unit of measurement. 
text-transform
text-align
Okay let's talk a little bit about relative font sizing.
Now there are two units of measurements that are relative that we're going
to talk about and that is percent and ems. 
Let's start with percent first of all let's specify that our body tag
should have fun size of a 120 %.
And what that means is Is that we want to take whatever the default size is,
and by default I mean whatever the browser provides by default, and
increase it by 120%.
You can actually do a quick calculation and
figure out what pixel size that would be.
Most browsers have 16 pixels as default text size.
So 120% of 16 would a little bit over 19 pixels. 
em is a unit of measurement that is equivalent to the width of the letter
m in this particular font that we're using. 
When you specify them on subsequent elements,
they don't have an overriding effect, they have a cumulative effect instead. 
First it's a pretty common practice, that if you want to increase the font-size in the entire document, that you specify percentage and
you apply it usually to the most parent tag, which is usually the body tag.
And technically speaking, you could have continued to use percentages even here.
So 2em really translates to 200%.
However it's more common to use ems when you're talking about relative sizes
within the documents itself. 
I highly recommend you don't mix and match the percentage, ems and
certainly not the absolute value units all over the place. 

19 The Box Model
In HTML every element is considered a box.
Besides their content, each box consists of padding, border as well as margins.
The box model refers to the components that make up an HTML box
as well as the rules that govern how these box components affect the layout
as well as how width and height of the box are calculated.
padding, margin, border
background-color
width, height
width è del contenuto; la larghezza del box è width + padding + border
(box model W3C)
in CSS3 c'è la proprietà box-sizing che, se impostata a border-box fa si che la larghezza totale del box sia quella specificata in width (come succedeva nel box-model di MS!!!)
But the truth of the matter is, all the modern frameworks like Bootstrap and
others use box, border box as its sizing mode,
and as you plan and work with your layouts this is the same choice to make.
So, make sure you always stay with a box sizing of border box.
NB: ma box-sizing NON viene ereditata!
-> per avere box-sizing: border-box in tutto il documento usiamo il selettore *:
* {box-sizing: border-box;}
Ma box-sizing si può usare in tutti i browser?
Per vedere questo usare il sito www.caniuse.com
margins that are left to right are cumulative
in verticale the margins collapse, and the larger margin wins
if you wanted to reset the CSS browser defaults
if you would do this most of the time using the star selector
Se fissiamo un'altezza troppo piccola il contenuto deborda. come si gestisce? Con	
overflow
Con overflow: auto compare, se serve, la barra di scorrimento.
Per averla sempre visibile, impostare overflow: scroll

20 The background Property
background-color
background-image (the URL that you supply is a relative variable, but
it has to be relative to your CSS)
background-repeat
Also notice that we're using a background-color property and
a background-image property at the same time.
And you can see that image wins on terms of priority.
It is on top of the color.
background-position (specify the position of the image within the element. Now, specifying only one of these will make the other one default to center)

21 Positioning Elements by Floating
When you float elements, the browser takes them out of the regular document flow
when it comes to floated elements, the margins never collapse.
the browser should resume the regular document flow.
And the way that we do that is by using the clear property.
So let's go ahead and go to our styling and define section target and
wel say, clear: left.
And what this is doing is telling the browser that the section element is
announcing that nothing should be allowed to be floating to the left of it. 
(la section è quella nel codice di esempio)
clear: left,
so nothing should be allowed to flow to the left of it
Okay, so let's go ahead and try to achieve that two column layout design. 
Floats are taken out of their normal document flow, and
they're positioned at the top left or right edge of the containing element.
Also, floats don't have vertical margin collapse, so
previously hidden or collapsed margins will show up once you float the element.
And remember that to resume normal document flow, use the clear property.

22 Relative and Absolute Element Positioning (+ Static)
Static positioning is basically a different way of saying normal
document flow.
It is actually a default setting for all elements, except html.
And if you try to apply positioning offsets on elements
who's position property is set to static, the offsets are just ignored. 
Let's speak about a couple more positioning schemes: relative and absolute.
These positioning schemes allow you to specify precise offsets to move
the target element to the different part of the page origin. 
When you apply position relative on an element.
the element is positioned relative to its position in the normal document flow.
In other words, if you were to apply offsets on that element, there will be
offset, from the original normal document flow position of that element. 
The positioning CSS offset properties are top, bottom, left, and right.
So when you position element as relative you're basically creating like an anchor
for the offsets.
So the elements top, bottom, left, and right edges become the boundaries from which you offset the element. 
The important thing to know about relative position is that the element
that is set to relative positioning is not taken out of normal document flow.
In fact even if it's moved by using the offsets, its original spot is preserved.
In sostanza, l'elemento viene visualizzato spostato, ma viene "percepito" dagli altri elementi come se fosse nella sua posizione normale. 
So the way you could think about these offsets is really not top or
left but more like from the top and from left. 
So if you take from left 50 pixels, you move 50 pixels to the right, and
if you take from top 50 pixels, you're really removing 50 pixels from the top. 
The original space for that element still remains and the originally laid out
elements around that element still remain exactly the same,
because they think the element is still sitting in its original spot. 
Now the idea of absolute positioning is that all offsets, top, bottom, left,
right, are all relative to the position of the nearest ancestor
which has positioning set on it other than static.
In other words, some parent, grandparent, on and on and
on, ancestor has to have its positioning set other than static, and
then the absolute positioning will actually start working.
By default, HTML element is the only element that has non-static positioning set on it. And it's actually set to relative.
Unlike relative positioning, the element is taken out
out of its normal document flow if it's positioning a set to absolute. 
Gli offset di un elemento con posizionamento absolute sono relativi all'antenato più vicino (es. il padre) che abbia posizionamento diverso da static.

23 Media Queries
Media queries allow you to group styles together and target them to devices based on some criteria.
For example, you can target a device by its width, its height, or orientation.
Of course one of the most obvious differences between viewing
a website on a desktop browser and your cell phone is the screen size.
Remember that using CSS you have the power to produce very different web page layouts from the same HTML. 
Without media queries, responsive design wouldn't be possible. 
A media query starts with a keyword @media, and
then it is followed by a media feature, and followed by curly braces.
Within those curly braces you have your styles.
Each media feature resolves to either true or false.
You can have more than one media features combine together using logical operators.
If the media features resolve to true, the style within the curly braces apply. 
There are quite a bit of these media features that are available.
So you can have max-width, you can have min-width, you can have height which is
not listed here, you can even target orientation of your device, portrait or
landscape, you can target only screens as opposed to targeting only print.
the most common ones are the max-width and the min-width.

the media features can be combined using logical operators.
One of the most common logical operators is the and operator.
Another way to combine media features is to place comma in between them which will basically translate into being equivalent to an OR operator.
when you approach responsive design and
responsive layouts, the most common logical operator is the and operator. 
Now before we jump into a code example I'd like to show you a very common approach
how you structure media queries within your style sheet.
What usually happens is you have a few of these media queries, but
you almost always start with some base styles.
Base styles will apply across the board no matter what screen size
you actually are viewing the website on.
Then you go ahead and start targeting a particular screen size
by either changing some of the properties of the base styles or
adding something else to them or maybe taking something away. 

24 Responsive Design
Responsive design was born primarily out of the need to deal
with the explosion of mobile devices that started being able to
browse the web much in the same way that a desktop browser user browsed the web. 
Gli smartphone hanno schermi più piccoli, e quindi bisogna adattare il sito alle varie dimensioni degli schermi.
So what is a responsive web site?
Well, that's a site that's designed to adapt its layout to the viewing
environment by using fluid, proportion-based grids,
flexible images, and CSS3 media queries.
And by proportion-based grids, what we mean is or
hinting to Is that the width of these grids or
these columns as we'll see in a moment should be specified using a percentage. 
The largest part of responsive design is, obviously, the layout.
And the most common layout out there or responsive layout, is a 12-column grid
responsive layout and this is what, a bootstrap, Twitter Bootstrap uses and
just about almost really every responsive framework out there uses nowadays.
And, the reason 12 is what's used is because of the factors of 12.
You could basically, t's evenly, nicely divisible by 1, 2, 3, 4, 6, and
obviously 12 itself, which means, we could sub-divide our
page into sections that are evenly split and nicely layout themselves.
Impostazione "manuale" di una pagina con responsive design
- si informa il browser dei telefonini di non zoomare (il nostro sito ha un responsive design, e quindi non deve essere zoomato - verrebbe rimpicciolito):
  <meta name="viewport" content="width=device-width, initial-scale=1">
- tutte le larghezze devono essere date in percentuale, per adattarsi alla larghezza della finestra
- si dichiara la "riga" che conterrà gli elementi del nostro responsive design:
  width: 100% (la riga occupa tutto lo spazio del suo contenitore)
- tramite le media query (una per ogni tipo di larghezza che vogliamo gestire) si definiscono le caratteristiche delle colonne lungo le quali si disporranno gli elementi del layout:
  - nomi del tipo col-lg... e col-md... 
    (no small, perché è il default)
  - float: left; width: ...;
- struttura html_
  - <div class="row">
      <div class="col-lg... col-md...> ... </div>
	  per varie volte (per via delle media query SOLO  UNA delle classi esisterà - e quindi sarà applicata - in funzione delle caratteristiche del device nel quale viene visualizzata la pagina)
	  Poiché le classi "col---" sono float, a seconda delle loro larghezze si disporranno in fila nella riga per un certo numero di colonne, e poi andranno a capo. Poiché la loro larghezza dipenda dalle media query, il numero di box in riga varierà a seconda dell'effettiva dimensione della finestra del browser. Quando lo schermo è piccolo (la nostra condizione di default) non abbiamo messo media query (quindi classi tipo col-lg e col-md NON esistono) i nostri div non saranno più float, e poiché sono elementi di blocco si impileranno automaticamente uno sotto l'altro (e quindi avrò un layout a 1 colonna).

25 Introduction to Twitter Bootstrap
Bootstrap is a CSS framework.
Bootstrap è basato su jQuery.
Bootstrap is the most popular HTML, CSS, and JavaScript framework for
developing responsive, mobile first projects on the web. 
Bootstrap consists mostly of CSS.
It pre-defines a lot of CSS classes for you. 
Bootstrap grid system (totale larghezze delle colonne = 12)-
The concept of Mobile First, that is, the importance of
planning for the mobile version of your website from the very beginning. 
Per usare Bootstrap conviene preparare un modello di pagina html5 con il meta "viewport" e i riferimenti per includere (da locale o da cdn) i file bootstrap.min.css, e nell'ordine jquery.min.js, popper.min.js e bootstrap.min.js.
Le media query sono già implementate in bootstrap.min.css

26 The Bootstrap Grid System
one of the most central components of Bootstrap that allows developers to easily
create responsive layouts is the grid system. 
First of all, your Bootstrap grid always has to be inside of a container wrapper.
The next component of the grid is the row.
So the row class creates horizontal groups of columns
which means that the columns collapse and interact with each other as a group but
independently from columns in another row. 
Let's move on to the columns.
So every Bootstrap column class is defined using this template.
It's c o l, col, for column dash SIZE and then dash SPAN.
And let's go over the components of this, of the two components of this template.
First of all the size.
Well the size is screen width range identifier and
it's something like MD for medium, LG for large, and so on.
And the span, is really, all it is is how many columns the element should span.
So the values are from 1 to 12.
And I've mentioned many times that Bootstrap is a 12 column grid layout. 
Nel body il div principale è <div class="container-fluid"> (oppure "container")
Nelle varie "row" mettere gli schemi delle colonne in modo che, per ogni classe grid considerata (tra xs, sm, md, lg) il totale delle "larghezze" faccia 12. Ad es:
<div class="col-sm-3 col-md-6 col-lg-4">bla bla</div>
<div class="col-sm-9 col-md-6 col-lg-8">bla bla bla</div>
(sm-3 + sm-9 = 12;   md-6 + md-6 = 12)
Gli elementi che costituiscono le colonne del responsive design devono avere classi multiple che vengono attivate in modo mutuamente esclusivo tramite media query che tengono conto delle caratteristiche (es tipo, larghezza) del dispositivo o del(la finestra del) browser nel quale viene visualizzata la pagina.
Info molto buone sui breakpoint e in generale sul "grid system" di Bootstrap in https://getbootstrap.com/docs/4.0/layout/grid/
o in https://getbootstrap.com/docs/5.0/layout/grid/
Which means that if you want to guarantee that there is always going to be
a particular layout, you could just specify it in the col-xs and it will stay.
No matter what the size of the screen, that's the layout that will stay. 

27: Visit with the Client
Now before we go and visit with the client, let's go over some rules and
just basic ideas, so you're not completely in the dark.
Now obviously, this is not going to be a comprehensive business strategies or
comprehensive how to deal with clients, but some basic ground rules just so
we understand where we're coming from.
And the first concept that you need to remember is that most clients have
no idea what they want.
So, it's really your job to ask questions.
And most importantly, the right questions to help the client figure
out what it is that they want and kind of communicate that back to you. 
A great way of doing it is if you bring some website examples of similar
businesses that already have websites and have the client react to those websites. 
Now as a general rule,
every single client is going to want to put a lot of information on the page.
The only problem is, is that when everything is important,
nothing is really important.
So again,
it's your job really to encourage the client to follow a very simple rule.
Less is more.
The less information you put up, the more impact that information will get. 
you should try to help the client do is identify the crucial
information,
Now, a quick tip I'd love to share with you is the fact that you
should always try to find a way for the client to invest in the project and this
is especially true if you're doing this for free just to build up your portfolio.
The client needs to feel like they have some skin in the game, as well.
If they don't, what's going to end up happening is that you're going to be some
side project that they're really not going to pay much attention to and
you're going to spend and invest all this time of your own and
not necessarily get much cooperation from their side. 
Another important rule is make sure that you have the client designate one person
responsible for decisions.
If you don't, what's going to happen is that this person is going to tell you,
really what we want is this way and the other person in the business is going
to tell you we want something else differently here.
If you have one person, you could always tell the other people that are suggesting
things that it's a great suggestion and I am responsible to this particular
one person and I'll bring that suggestion to that person. 
Limit the number of revisions UPFRONT.
Make sure you communicate to the client upfront, have them even sign a contract,
have them sign that this is the number of revisions that I'm willing to make.
Because obviously, the clients can go on forever and
ever and ever and your time is limited. Now if it's a paying job, don't limit revisions out of hand,
but limit the number of free revisions.
If you say, I will revise the site within reason not completely turn it upside down.
But within reason, I'll revise it up to like three times free. 
I highly suggest you Google web development client questionnaire and
you will see a whole bunch of resources that you can draw from to really find out
how to ask these questions and what kind of answers to look for
Another quick tip I'd like to share with you is you should try to involve others if
you need it.
So for example, if you're not a super duper graphic designer and
we're really concentrating on coding things not really designing per se,
you could contact the local college and see if a graphic designer student wants to
join you and provide some free design services and put that on their resume. 
I will still have the restaurant owner invest in this project.
And the way they will invest is that they agree to provide every single item on
the menu to provide for us just, so we could take proper pictures of those items. 
So it's hours and hours of their work, but it's something that shows the client
is involved and the client is committed and that's very important. 
Now, another thing is definitely don't go in to the meeting with the client without
first finding out what does the client have right now.
What kind of website do we have they have?
What information is being displayed?
Just to learn a little bit about the business. 

When you get right down to it, this really is all about setting expectations.
Whether it's expectations about what the client is expecting from us or
our expectations of what the client is going to provide.
So, if we can achieve that of communicating those expectations very
clearly, we've done our job. 
Basically, we're going to create a mockup of the website, not the real website.
So just a mock-up, a drawing of the website.
And we're going to show it to you and
basically see if you approve of the way it's going.
And we'll give you three revisions, three times
that you can update the thing and say, I want something different a little bit.
And after that, you'll try to finalize it.
Are you okay with that? 
So pictures that have usually, especially, a website like this is very important. 

28 Design Overview
So when you're first starting to design a website,
the worst thing you could possibly do is start coding right away.
You don't want to do that.
You don't want to design a website coding it at the same time.
What you do want to do is you want to have some mock ups, some layout mock ups,
that you present to the client that take little to no time to design and
to put together and present to the client.
So what we're going to do is design the mock ups first.
So the tool we're going to use is called balsamiq.com
This tool is not free
Now, this big area, what's planned for
this is some kind of a picture of the inside of the restaurant.
It's going to be what's called a jumbotron In Bootstrap. 
Next, let's take a look at some design that has already some colors and
some more concrete layout.
So here's what our designer came up with.
This is just a basic idea,
this is what you are usually going to get back from a designer.
You're going to get some kind of a color scheme.
Some photography.
And the photography is not from this particular restaurant.
It's just some stock photography that you can certainly use
in order to kind of enhance the site to see what it looks like. 
Designer will typically provide for you the hexodus more color values for
different components within your website, and
it will also tell you which fonts that they used inside this design.
Now depending on your budget and if you're trying to do things for free or
certainly trying to find free resources,
I'll recommend the prompt that you try to stick with Google fonts.
There's a website Google.com/fonts. 

29 Some Ground Rules and Overview of Setup
So the first thing we want to do here is set up some global styles that the entire page, and really, across all pages, will be true.
So we'll do that using body. 
Google fonts: https://www.google.com/fonts
Fare click sul font desiderato (lo si può anche cercare per nome) e nella pagina successiva fare click su "+ Select this style"
Appare a dx una finestra, nella quale si può copiare il codice da inserire nel file html per usare il font (NB: se si chiude la finestra, per tiaprirla fare click sul pulsantino con i 3 quadrati e il più, dopo "Download Family").

30 Coding Basics of Navbar Header
there is a semantic HTML5 tag called header.
So the first thing that we're going to do is create our nav bar.
Basically, the navigation bar.
And this is going to be done by the nav element, and
we're going to give it an ID called header nav.
And we'll see in a minute why we're going to need that.
And we're going to give it some classes that Bootstrap provides for us.
And it's going to be two classes.
One is navbar.
Another one is navbar-default (serve per i colori). 
Now Bootstrap does this a lot.
It will give you like a base class, and it will give you then a sub
class that basically uses the base class, plus add something to it.
So there's navbar-default, there's navbar-invert (a sfondo nero).
There's different classes that really share some of the properties of
the navbar, so you should really just get used to that
and remember there's two types of containers.
There's a container-fluid, and
that's the one that stretches all the way to the edges of the browser.
And it has about 15 pixels of padding on both sides.
And then there's the regular container that actually changes its width
based on the width of the browser.
And basically our entire content of our website is going to sit inside of that
container or at least be aligned with this container.
This is going to be our header container, and
we're going to have another one that's going to be for the main content.
And the reason we're doing this instead of using container-fluid
is because our website doesn't have that much information on it.
If it doesn't so many different things going on here.
So if we were to let the content stretch and
reposition itself all the way to the widest point,
the width of the browser, this website would look a little bit weird.
go ahead and try to place our logo in the top left of that header element.
it has a class called navbar-header.
And basically if you look up the Bootstrap documentation,
it's kind of a wrapper class that a lot of
other classes will depend on being in this position in order to work properly. 
So how did I know to put navbar header here and wrap some items in it?
Well the way I knew it is to go to documentation. 
logo-img è un div (e non una img) perché l'immagine la mettiamo come background via css.
And the way you do it in a boot strap is you apply.
In this case to this region right here which is our logo, and
we'll apply a class called pull-left.
And pull-left is basically float left. NB: in Bootstrap 5 la classe è float-start!
we don't always want to display this logo as we squeeze
the browser
Okay so if we go to index.html there are a couple of classes that bootstrap defines
that let's you basically say that this element should only be visible in
a particular break point and they're called visible, visible-md and
what I'm saying is if the screen size is medium I want this element,
this a href element to be visible but if it's anything other than,
at this point, a medium-sized screen, I don't want this element to be displayed. 
NB: in Bootstrap 5 visible-md diventa d-none d-lg-block

31 Coding Button for Future Collapsible Menu
Componente navbar:
https://getbootstrap.com/docs/5.0/components/navbar/
https://www.byte-post.com/barra-di-navigazione-navbar-bootstrap/
Classe collapse: 
https://www.w3schools.com/bootstrap4/bootstrap_collapse.asp
https://getbootstrap.com/docs/5.0/components/collapse/
Fix per l'hamburger button non visibile:
https://www.drupal.org/project/bootstrap_barrio/issues/3155464

32 Coding Nav Menu Buttons
il riferimento della classe data-bs-target del button indica al plugin js qual è l'area da collassare.
Il menu è una ul. And we're going to give it a few classes.
One is nav, navbar-nav, and navbar-right (in BS 5 navbar-right -> navbar-end).
Well nav and navbar-nav is basically saying that
I am going to be a component of our navigation bar or navigation. 
So this is navbar-right means I want to still have a navigation bar, but
I want it to be pulled to right. I want it to float all the way to the right.
Le voci del nemu sono tag li con dentro tag a.

a special couple of classes: Glyphicon, glyphicon-cutlery.
And what these classes do is they're able to bring in what's called an icon font.
An icon font is basically a vector based image that is able to
behave in the same way that that the font would behave.
In other words you could size it, you could colorize it, give it a color,

NB: le icone Glyphicon NON SONO PIU' DISPONOBILI dalla vers. 4 di Bootstrap!
Usare le icone sviluppate da Bootstrap:
https://icons.getbootstrap.com/

Altre possibilità:
Font Awesome: https://fontawesome.com/

Also notice, we're putting a break between the actual icon and the word menu.
But we're not just putting a break, we're putting a class on it and
we're saying hidden-xs (in BS 5 è d-none d-sm-block) which means I want this break to go away when the screen size is extra small.
And there are a couple of things here.
Number one is I'm telling you tel with a colon and the phone number and
what's that going to do is if actually somebody clicks on it or taps on it
they will trigger the phone to try to call it, so let's say you have calling
program installed on your computer in the regular desktop, they'll trigger that.
Or if you're on a mobile phone, this type of set-up will trigger the phone to try to call or use its phone feature to call:
href="tel:410-602-5008" -> lo smartphone chiama il numero.
 
33 Fixing Navbar Layout, Text, and Dropdown Menus
And the font size is something we haven't really seen in this type of unit before. It's 5vw.
What is vw stand for?
Well vw stands for viewport width and one unit, so
if you let me create a little note here as one unit of vw,
vw is equals to 1% of viewport Width. 
And the reason we're using these units is because these units are responsive.
In other words as the screen keeps stretching and being squeezed
this is going to be, the font size is going to be relative to the screen width. 

Lecture 34 Coding the Jumbotron
And what we're going to start with is this giant picture of the restaurant,
of the interior of the restaurant, which is actually what's called the Jumbotron in bootstrap speak.
However before we start, we're going to have to define some element that is going
to be a container for everything that is inside of our website.
And that's simply because remember, we put in the container our header and
we want everything nicely aligned to its edges.
So we need a top level element within our main content
to have a container class assigned to it.
Well the way we're going to code our Jumbotron is we have a whole bunch of
images in the Images folder.
As you can see, jumbotron, they all are sized very differently.
The first one is 768, that one is 768 pixels wide.
Then there's jumbotron 992.
That one is 992 pixels wide, and finally the 1200 one is the biggest one there.
And obviously what we want from this is, to be able to substitute different
pictures, different resolutions, depending on the screen size. 
And what's going to happen is we're going to assign a background CSS property
to this DIV and it's going to load the image responsively.
Meaning depending on the media query it's going to appear and
is going to load different size image.
The classes, the class IMG responsive comes from Bootstrap.
And basically what it says is, as I change the width of the browser, the width and the sizing of the image is going to change proportionally. 
And also I'm only going to make this visible when the screen is extra small.
Okay so let's go back to our code editor and we'll open up our styles.css file and we'll load our jumbotron images in this proper media query.
And we're setting it's height because as you know background images don't effect
the height of the element, so therefore we need to set the height. 

Lecture 35 Coding Navigation Tiles
(NB: spiege benissimo il posution relative e absolute!)
And since the whole main content is already a container,
then I don't have to provide another container.
Remember that every Bootstrap grid has to be inside of a container or
an element that is marked with a container class. 
I do need to define a row
For the desktop, we want md-4, md-4, and again, md-4, which means they add up to
12, So at the medium screen and above, this will become a three tile type of layout-
Moving on down at the small level, meaning at the smaller screen size, so
it's column small, the first two are column small 6.
So they'll take up half the screen.
And the third one, if you take a look, is 12th.
So when we are at the small screen size, the first two will take out
half the screen each, and therefore will take one, basically, row.
And the third tile will slide down kind of to the second row
And finally, at the smallest level, at the extra small screen,
we want every single one of those things to stack one upon the other.
And therefore we're doing extra small 12. 
So the way that's broken up is we have a link that is surrounding a div, and
the div has an id menu-tile.
And inside that div we have a span called menu.
And the reason I'm breaking them out like that is because the div with an id
menu-tile is going to be something we're actually going to size and
make a particular square rectangle looking thing.
And the menu span we're actually going to
position absolutely within the div of the menu tile. 
And the way we're going to achieve that is we're going to size this square
right here and
then make it relative, which means all i's children can now be positioned absolutely.
And we're going to be very easily positioning them right at the bottom,
without having to worry about this element's overall position on the screen.
So it will be absolute, but it will be, at the same time,
relative to the tile within which it's going to live. 
And the reason we are going to define a target of _blank, is that if somebody
clicks on this map I don't want them to forget about our restaurant website.
So it will automatically either open a new window
Their width each one is going to be a 100%.
Well, I don't really mean 100% of the screen obviously.
I mean a 100% of whatever their container element is going to be. 
I want it to be as wide as this grid will allow me to be. 
Well all of them are important, but this is the positioning part,
position relative.
So position relative, as you remember, will not actually move the style anywhere,
but it will set up something like an anchor for
the rest of the child elements of whatever these IDs are.
So now I'll basically be able to position them absolutely within this element. 
And also notice that I'm positioning it in the center of my container element.
What that's going to give us is that as the container element, that tile,
shrinks a little bit, since the main dish is still sitting in the center,
we're still going to see quite a bit of it and eliminates the need for
us to provide different sized images for different screen sizes. 
So the first thing you see here is position: absolute.
And that means we're going to be positioning these spans absolutely within
the containing element, which is the menu-tile.
Okay, so positioning absolutely,
we need to bring them all the way to the bottom, let's go take a look.
We need them all the way at the bottom right here.
Well, that's very easy to accomplish.
It's bottom 0, right 0.
Well, that's easy.
And we want the width to be 100, which means 100% of the containing
element again, I want it to stretch all the way across the tile.
Okay, text align: center, that's pretty simple. 
Okay, next let's go ahead and embed the map right here into this map tile.
The first thing we want to do is we want to go to maps.google.com and
you want to search for the location that we need to map into that tile. 
And so, in order to get the embedded map, so what you have to do is you have to go to this menu right here and go to share or embed map.
And it's going to come with either a link or embedded map.
and we need to past this iFrame right here in the middle of this div. 
And the width, we actually need to be 100%.
Because once again, the width is going to be defined by the grid,
by the bootstrap grid, and we want the style to stretch as much as
possible to the edges of that cell inside that grid. 
We really don't want these borders to stretch all the way.
We want them kind of to stay together with the picture.
Otherwise the whole thing looks weird. 
Let's go and open up our Chrome developer to see why.
Well, there's actually a very quick and easy fix is to specify margin: auto for
both the right and the left margin.
And that only works if you actually size the element.
So we'll go ahead and say margin, we'll give it a top of 0 and
to the side of auto and to the bottom of 15 pixels. 
So we really need two things.
Number one, we need menu-tile, and we also need specials-tile.
And both of those we want to give it a width of 360 pixels (come le dimensione dell'immagine) and margin of 0 auto and 15 pixels.
So now when we save that and go back to our browser, we should reload that.

Lecture 36 Coding the Footer
Usa il tag semantico "footer".
Per stilizzarlo usa la classe panel-footer, che in Bootstrap 5 è sostituita dal componente "card"
Da Bootstrap (https://getbootstrap.com/docs/4.0/components/card/): "A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you’re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards."
Anche quì, come per le altre parti della pagina, si usa un div.container, in modo da mantenere l'allineamento.
Poi in una .row ci mettiamo tre section.col-md-4 per avere 3 blocchi responsive (griglia a 3 celle) che si impilano su schermi da piccoli a md.
Varia formattazione per abbellire le scritte.
All'interno componente "card" (https://getbootstrap.com/docs/5.0/components/card/)

Lecture 37 Coding the Menu Categories
we have a span and we're going to
target that span and position it absolutely within the div element itself.
So, the div element will be like a relative anchor for
the span that's inside of it and we're going to put it on the bottom. 

Lecture 38 Coding the Single Menu Category Page
Next thing is the image itself: we're going to give it a class img-responsive (in Bootsrap 5 è .img-fluid). That's a bootstrap class that lets it stretch out and contract depending on the size of the screen.
Now notice that I'm not really using a responsive Images in the sense that
I'm not really substituting this image, depending on the screen size.
So I could have just made this a background image and then substitute the image depending on the screen size for the larger screen size.
That would give a higher resolution lower, lower, lower and so on.
And the reason I'm not doing it is because it's already a pretty small
resolution as it is.
And I don't think it's going to be such a big deal to load,
even on a mobile device over a cellular connection.
And the maximum width of 250 pixels.
Let's go ahead and take a look at the HTML of the menu item photo, right here, menu item photo. And you see that we made the image responsive.
Well the image is 250 pixels wide. We don't want the image to be any bigger than that, otherwise this is going to become pixelated and the layout is probably going to get messed up as well.
So that is why we're saying that the maximum width it can ever go
is 250 pixels. Don't stretch this element anymore.

Lecture 39 Testing the Mobile Version on a Real Phone
Aggiunge la voce di menu "Home" per monitor xs.

Lecture 40 Adjusting Development Environment for Javascript Development
On Sublime text ... only include the lecture, the particular lecture we're on, in our work space.  There is a command that Sublime
comes with and it works on Windows, Linux, or Mac, and
this command allows you to start Sublime in a particular directory.
So, in this case, I mapped it to the keyword sublime and
if I say dot, which at this point is the current directory, and open it up.
Sublime will open the Sublime editor, and
it will only have that particular folder, as its kind of a work space.
So nothing else will be included. -> è meno "pesante"
Il comando da cmd è (nella dir. desiderata) "sublime ."
Da Sublime è File / Open folder.
Now let's go ahead start the browser-sync. Da cmd:
(portarsi nella directory del progetto, e poi)
browser-sync start --server --directory --files "**/*"
(**/* serve per includere anche le sottodirectory)
Okay, so what we're actually interested in is not so much the page anymore.
Is we're interested in the JavaScript that is going to run, and chrome developer
tools which is part of chrome browser is a great tool to have and to actually use. So what we're going to do is we're going to do Ctrl+Alt+I (o F12), so we'll go ahead, and open Chrome Developer Tools.
Lecture 40, Part 2: Where to Place Javascript Code
a couple of places where you could do that.
The first one is you can have a script tag inside the head section. 
So, this between the opening script and
the closing script tags, you can now write your JavaScript.
Another place where you could do that is, an external file. 
Now, just like CSS in HTML, JavaScript code is executed sequentially.
So it means whatever is inside of this script.js
file is going to get executed first.
And whatever is inside this script tag is going to get executed second. 
we'll go ahead and say console.log.
And console.log is something that we're going to be using a lot. 
t's also important to remember that the JavaScript engine inside the browser,
is a single threaded engine, which means that
as the code in your JavaScprit executes, it will execute completely
without being interrupted by any other JavaScript code from somewhere outside. 
Now the head section is not the only section where I could define JavaScript.
I could define JavaScript in a very similar manner
that I defined it in the head.
I could define that JavaScript in the body as well. 
I can include a JavaScript file right in the middle of the body of
the HTML page as well.

Lecture 41 Defining Variables, Function, and Scope
Variable definitions should always start with the keyword var.
Now notice that no types are declared in JavaScript.
And the reason that is,
is because JavaScript is called a dynamically typed language.
Now what that means is that the JavaScript engine
figures out the type of a particular variable at runtime.
And it also means that the same variable can hold different types during the life of the execution of the program.
Now in JavaScript, when you define a function name, it's very,
very similar to defining a variable whose value is a function.
So for example, you could define a function in JavaScript by either using
the keyword function followed by the function name.
Or you could create a variable and set it equal to a function.
Now when you do it the second way, no name is defined after the function keyword.
However, either syntax let's you refer to this function as a.
Now notice that the value of the function is assigned to a,
not the returned result of the execution of that function.
So after either of these definitions you can now invoke,
otherwise known as execute, function by referring to it by it's name a. 
The way you invoke a function is by taking the name, or the reference,
to that function and putting the parenthesis afterwards.
So that is called a function execution, or function invocation.
Now you can also define arguments to be passed to the JavaScript function.
Now the defined arguments are defined without the keyword var.
In fact, if you place the key word var in the function argument definition,
that will be a syntax error.
If you want your function to return some value, you use the return keyword
followed by whatever value it is that you want to return.
If the return keyword is not followed by a value,
what you're signaling to the JavaScript engine is that it should
terminate the function and exit out of it without returning anything. 
Now each function or variable lives within a particular scope.
In JavaScript there's really two scopes, global scope and
function, or otherwise known as lexical scope.
Now lexical here means that it depends on where something is physically defined.
For example, a variable that's defined within a function
is physically defined within that function.
There's no block scope in JavaScript.
Now variables and functions defined in a global scope are available everywhere.
Meaning any other functions that are defined in a global scope and so
on can get access to these globally defined functions and variables.
As far as function and lexical scope, variables and
functions defined here are available only within this function.
And you heard it right, you can define functions within other functions.
And those newly defined functions,
have a way to get at its outer function variables and functions.
Which leads us to the next topic, the scope chain.
Now in order to understand how scope chain works in JavaScript,
you have to understand how a JavaScript engine executes things.
Everything in JavaScript is executed in an execution context.
Now a function invocation creates a new execution context
within which that function is executed.
Now each execution context has the following.
Number one, it has its own variable environment.
This is where it stores its newly defined functions and variables.
It also gets the special this object,
which we're going to talk about at a later lecture.
And what's most important for
our discussion right now, it gets a reference to its outer environment.
Meaning the execution environment within which this particular function is defined.
Therefore, the outer reference of function B is the global scope, not function A.
What this means is that it does not matter where a particular function is executed.
What matters as far as resolving scope of a variable is concerned
is where that function is physically defined. 
...
So now b is defined inside function a,
which means b's outer reference is function a variable scope. 
---
Now, it's important to remember that all JavaScript code runs within some execution
context, and each execution context has a number of things that are available to it.
One of those things is the outer variable environment.
And scope chain is used to retrieve variables from outer variable
environments that are not found within your own execution context. 

Lecture 42 Javascript Types
A type is a particular data structure.
Built in types, can be used to build other data structures, that you can then use your particular business logic.
Now JavaScript has seven built-in types, six primitive, and one object type.
So what is an object in JavaScript?
Well in JavaScript an object is nothing more than a collection of name/value pairs.
What about primitives?
Well primitive type is a type that represents a single, immutable value.
What does immutable mean?
Immutable means once it's set, once that value is set It cannot be changed.
It means that once you set it, the value of the variable becomes read-only.
You could certainly create another value based on an a existing value but
the memory space that was allocated for the first value is not changed.
Instead, you create a new memory space for the new value.
primitive types
boolean: true or false
undefined: The undefined data type signifies that no value has ever been set
on this particular variable of this type.
This is the value that every variable gets when the JavaScript engine sets up
the variable in memory when it defined but has never been assigned any value yet. Now you can set a variable to the keyword undefined yourself manually,
but you should never ever do that. And the reason is, is because it's meaning is that it's never been defined. So defining it and then setting it to undefined Is really counter to its core meaning. 
null: Null signifies the lack of value. Now, the lack of value as opposed to undefined which signifies the lack of definition. And it's also perfectly normal and perfectly okay to explicitly in your code set a variable to the null value.
number: Well number is actually the only numeric type in JavaScript and
it's always represented under the hood as a double-precision 64-bit floating point. In other words, JavaScript does not have integer type. Integers in JavaScript are just a subset of doubles instead of a separate data type.
string: in JavaScript is very similar to the string type in other languages in that it is a sequence of characters used to represent text and you can define strings either using single or double quotes.
symbol: Now we're not really going to cover this data type in this class.
And the reason is, is that it's new to the ES6, otherwise known as ecmoscript 6.
Now ecmoscript 6, was released in 2015, around mid 2015, and it just isn't widely supported. 
Undefined in JavaScript has a specific meaning and
the meaning of it is, is that it has been declared, or defined, so to speak.
But it has not been set to any value.
So in this case the variable has been declared and a memory space has been
allocated for it, but no value has been placed in that memory space.
That's the state that assigns this variable to be a type of undefined.
Now if I save that, now it will tell me that the variable is actually undefined. 

Lecture 43 Common Language Constructs
string concatenation.
And the way I comment out the line without actually having to type it is
to press Ctrl+/
math operators + - * / () priorità
NaN
==
The x now is no longer 4 as a number, x = 4 as a string.
So what happens if we actually compare them now?
And you could see it says x = 4, 4 as a string is equal to y = 4.
Now what is going on here?
Obviously, the string can't possibly be equal to a number.
Well, what's going on here is called type coercion.
And type coercion just means that the language converts something for
you from one type to another type automatically on the fly.
So when the JavaScript tries to evaluate this equality,
it converts one of the types to be the same type as the other variable and
only then compares the values.
Now what if you didn't want that? 
What if you didn't want JavaScript to automatically convert things for
you when trying to evaluate its equality?
Well, that's where strict equality comes in.
Let's go ahead and comment that out and go to the Strict equality section here, and we'll uncomment that.
So strict equality is signified by using ===. 
In this lecture, we're going to go ahead and pick up speaking about
what JavaScript considers boolean true and what JavaScript considers boolean false.
Okay, so in this if statement
I listed every single thing that the if statement will consider False.
The first of all it's going to consider the keyword false is false.
Now then you see something that is an or operator.
Now the way the or operator works, is that if something evaluates to true on it's
left side, it does not check anymore what is going to be to it's right side.
And since I know that to it's left side at the moment, is going to be false.
I can be sure that it's going to evaluate this, and if this false,
which it is, it's going to try to evaluate this for truthfulness.
And if this is true, it will stop and will not evaluate anymore.
However, null also get's coerced to being false in JavaScript.
So therefore, we keep continuing, saying no which is again false or undefined.
Undefined is a keyword that also gets coerced to false in JavaScript.
Next, it's an empty string, so
it's basically double quotes with nothing in the middle.
That also gets coerced into being false.
Zero gets coerced to being false.
And NAN, not a number, gets coerced to being false. 
Now let me show you a very quick trick that if you ever forget, if
you have something and you're not sure is it supposed to evaluate to false or true.
Well, JavaScript provides these wrapper objects around the primitives.
So even though boolean is a primitive type,
there's a wrapper object called Boolean with a capital B.
That you can actually pass things to, to see what it would coerce to.
So, for example, if I pass it a null, that would coerce to false.
And there you go, it shows you false.
If I pass it something like an empty string, it'll coerce it to false.
But if I pass it anything else that is not in the list of false things that we
listed right here in that if statement.
So if I pass it something like, hello world.
That will evaluate to true,
which brings us to the next thing of what is true in JavaScript? 
Well, first of all the true keyword is evaluated as true in JavaScript.
After the keyword true, you see two ampersands.
And two ampersands signify the logical and operator.
And the way the logical and operator works, it will only return
true if both things on the left and on its right are true.
So if both of these things are true, this will be true.
And again, since we have a non-empty string here, this will evaluate to true.
Then we ending it, ending it again with a number one which is a number not a 0.
Anything not a zero also evaluates a true.
And just in case you think a -1 would evaluate to false, it does not.
It actually also evaluates to true.
Any number that is non zero will evaluate to true.
And if we end it with the string false,
even though the string itself has the value false, but
since it's a non-empty string, that will evaluate to true.
stile scrittura {} -> aperta sulla stessa riga!
ciclo for

Lecture 44 Handling Default Values
function f(param) {
  param = param || miDefaultValue;
  ...
}
-> se nella chiamata param viene fornito lo uso
-> se nella chiamata param non viene fornito uso miDefaultValue

Lecture 45 Creating Objects Using 'new Object()' Syntax
An object is, again, a collection of name-value pairs.
we're going to go over how to create objects in different ways and
how to assign properties, in other words how to create those name-value pairs. 
What you see in front of you is a very simple object creations, so
we're creating a company variable and we're setting it to new object:
var company = new Object();
Once we created a reference to an object, we're ready to create properties of that object.
Now in JavaScript, when a property doesn't exist and you simply mention that property in an object, JavaScript engine creates that property for you.
Quindi se dopo aver creato l'oggetto scriviamo:
company.name = "XYZ":
il JS engine crea le proprietà name per l'oggeto company e gli assegna il valore "XYZ".
Oltre alla "dot notation" posso usare la notazione a parentesi:
company.name
oppure:
company["name"]
La "bracket notation" permette di usare gli spazi all'interno del nome della proprietà:
company["stock price"]
accede alla proprietà "stock price" dell'oggetto company.
Con la "bracket notation" posso anche usare le variabili:
var propStock = "stock price";
company[propStock] = 110;
console.log("Stock price = " + company[propStock]);
-> posso "calcolare" al volo il nome della proprietà nel codice.
Vediamo ora una sintassi più semplice.
Object literal:
var facebook = {
  name: "facebook",
  ceo: {
    firstName: "Mark",
	 favColor: "blue"
  },
  stock: 110,
  "nome propr con spazi": 999
};
notare che le proprietà devono essere separate tra loro com la virgola, che NON ci deve essere dopo l'ultima proprietà.
Creare un oggetto in questo modo o crearlo con la new è la stessa cosa.

Lecture 46 Functions Explained
So the first thing I want you to know is that functions
in JavaScript are what's called, first class data types.
What that means is, is that whatever you could do with the variable,
whatever you could do with an object you could also do with the function.
You could pass that around, assign it to a variable which as you've seen before,
you could pass it as an argument to another function,
you could return it as a return result from a function.
Functions in JavaScript are objects.
They're regular objects that have some special properties to them.
So since they're regular objects, I should be able to set properties on them
just like I set properties on the other object. ES:
function mult(x, y) {
  return x * y;
};
mult.version = "1.0";
console.log(mult(3, 4));
console.log(mult.version);
console.log(mult); /* è come scrivere: console.log(mult.toString()); */

visualizza:
12
1.0
function mult(x, y) {
  return x * y;
};
So our function is nothing more then an object.
Now the fact that it's an object allow us to do quite
a number of interesting things that are so useful in every application. 
Più altro ...

Lecture 47 Passing Variables by Value vs. by Reference
Copying or passing things by the value means that changing the copied
value in b, does not affect the value stored in a, and vice versa.
...
Now in JavaScript, the way it works is that primitives are passed by value,
and objects are passed by reference.
Or to say it another way, primitives are copied by value and
objects are copied by reference.
Now the truth is that underneath the hood
in the JavaScript engine everything is actually passed and copied by value.
And the difference is why one is really called passed by reference and
one passed by value really comes because of the way the objects and
primitives are stored in memory.
The difference between passed by value and
passed by reference is that in passed by value the values once it's
changed do not affect the original value of the original variable.
As opposted by reference when you change the value,
the original object that's pointing to it is changed as well. 

Lecture 48 Function Constructors, prototype, and the 'this' Keyword
In this lecture, I'd like to show you one more way to create objects in JavaScript.
And it's a very common way, especially if you have functionality together with those objects, very similar to like a Java class, for example. 
Now, we discussed in one of the previous lectures as to what happens when you
actually invoke a function.
We discussed the fact that a new execution context is created within which
this line or whatever is inside the function is actually executed.
And we also discussed the fact that that execution context gets a special
variable called "this".
And "this" is pointing to the global Window object. 
But if we actually wanted to kind of encapsulate some data within a particular
object and use a function for it, then we would need "this" to point to something else.
And this is where function constructors come in.
Okay, so let's create another function, and let's call this function Circle, we're going to create circles.
And this time, we're going to say Circle with capital C.
Now, there's really nothing about capital C that does anything special
other than it lets me know that it's a function constructor.
So it's basically just a convention to let other developers
know that this is a function constructor as opposed to a regular function.
And a Circle should have a radius:

function Circle(radius) {
  this.radius = radius;
}

And what I'm going to do is, instead of just invoking the function Circle,
I'm going to use the new keyword and then say Circle, and give it,
let's say, 10 as the radius:

var myCircle = new Circle(10);

When I invoke a function together with the new keyword, the JavaScript engine
makes "this" point to the object itself that got created, which is the Circle.
So this means that technically, what I could do inside function Circle is I could say, this.radius, so I could create sort of a member variable or
a property of this Circle object, and I could say, radius.
Now, the function constructor itself or the function Circle cannot return anything. 
Now, what would be an object without some methods?
And methods in JavaScript are just functions that are set on properties of objects:

function Circle(radius) {
  this.radius = radius; // proprietà (è duplicata in ogni oggetto: OK!)
  this.getArea = function() { // metodo (è duplicato in ogni oggetto! NO!)
    return (Math.PI * Math.pow(this.radius, 2));
  };
};

The problem is, as we keep creating these Circle objects over and over in our code, we're going to keep creating this getArea function over and over in our code. Because every time we say new, this entire thing gets created.
Well, for radius, it's perfectly normal, because each circle should have its own radius.
We really don't need our type Circle to have its own getArea on every
object that's created.
It really should be just created once, and all the circles, all the instances of a Circle, should share it.
And the way we could do that is by using a special property called prototype:

function Circle(radius) {
  this.radius = radius;  // proprietà (è duplicata in ogni oggetto: OK!)
};
Circle.prototype.getArea = function() { // metodo (è condiviso da tutti gli oggeti Circle: OK!), e va messo FUORI del costruttore, come si fa qui
 return (Math.PI * Math.pow(this.radius, 2));
};
e poi:
var myCircle = new Circle(10);

So make sure you remember to put the new keyword there.
One clue is to always make the function constructor names capitalized,
that's why you will remember that this is not just a regular function,
it's actually a function constructor and you must use it with the keyword new.

Lecture 49 Object Literals and the 'this' Keyword
 In the previous lecture, we saw how the this keyword behaves itself when it's part of a function constructor.
That is, it's referring to the function itself, or the object itself when that function is invoked together with the new keyword.
In this lecture, I would like to look at object literal and how the this keyword behaves itself inside of one.
So when an object literal gets created, "this", instead of pointing to
the global object (window), is actually pointing to the actual object that got created.

Lecture 50 Arrays
Crazione:

var a = new Array();

Once I created the array I can now set items into that array.
In JavaScprit c'è la tipizzazione dinamica, e quindi ...
And arrays are zero based, so I can say zero and let's say in the first position, which is position zero, I'll place a string, and I'll use my name, Yaakov.
In the second position, which is position one, I'll place a number, let's say two.
In the third position, which is two, I'll place a function.
So in the fourth position, I am going to place an object literal:

a[0] = "Yakov";
a[1] = 2;
a[2] = function (name) {
  console.log("Hello " + name);
}
a[3] = {course: "HTML, CSS & JS"};
console.log(a);
console.log(a[1]);
a[2]("Alex"); // esegue la function contenuta in a[2]
a[2](a[0]); // passo "Yakov" alla function
console.log(a[3].course); // scrive "HTML, CSS & JS"

So because of dynamic typing, in JavaScript I'm able to store different
types of objects in the same array, which is not true of most languages.
Okay, I can also create arrays using a short hand array notation:
var n = ["Alex", "Sandro", "Gianni"];
console.log(n);
for (var j = 0; j < n.length; j++)
  console.log("Ciao " + n[j]);
};

Now what's interesting about arrays in JavaScript is that they can even
be sparse
And there's a special for loop that you could use to traverse the properties of an object:
var myObj = {
  name: "Yakov",
  course: "CSS, JS",
  plarform: "Coursera"
};
for (var prop in myObj) {
  console.log(prop + ": " + myObj[prop]);
};

Now we know that in JavaScript arrays are just objects and
the indices are just property names.
So technically speaking I could use the same type of four loop
on my n array as well: 
var n = ["Alex", "Sandro", "Gianni"];
for (var nome in n) {
  console.log("Ciao " + n[nome]);
};

Lecture 51 Closures
capito zero!

Lecture 52 Fake Namespaces
And what's going on is that one script is stepping on the toes of the other, basically. So how do we solve this situation?
Well, one way of solving the situation is introduce name spaces, and a name space is basically just a container for some functionality and for some declarations.
The only thing is,
is JavaScript doesn't really have name spaces that other languages have.
However, in JavaScript we could fake name spaces very easily. 
And we'll just make it equal to an empty object.
Now instead of just declaring name right here in the global scope,
what I'll do is I'll declare name as a property of that object:
var myNameSpace = {};
var myNameSpace.var1 = "valore";
var myNameSpace.var2 = 22;
myNameSpace.myFunction = function (param) {
  ...
};
... e questo per ogni file di libreria, così da isolare le cose di quel file rispetto a tutti gli altri. Poi le cose si usano con il "prefisso", es:
myNameSpace.var2
So that worked perfectly, ma non mi permette di tenere delle cose "private": è tutto "pubblico". Per avere cose "private"posso usare le IIFE.
So this is something that you could do in order to separate
kind of your name spaces, separate your functionality into separate files and
also into separate name spaces, so you don't step one up on the other.
But there's something you could do to go even further in order to separate
the different variables that are sort of like private variables
between different scripts and different execution contexts. 
but there is something you could do to go even further
Well, one more thing we could do is introduce something that's called
immediately invoke function expression (IIFE:
(function () {
  //codice della funzione
})();
Ora, la "function" tra parentesi tonde è un'espressione che produce un valore, e questo valore è un oggetto function. E questo oggetto viene eseguito perché è seguito da "()". Posso anche passare dei parametri:
(function (param) {
  //codice della funzione
})("valore del parametro, in questo caso una stringa");

Con il "fake namespace", come abbiamo visto, tutte le cose sono "pubbliche", e fanno parte dell'oggetto "window".
Le IIFE ci permettono di tenere cose "private":
(function (window) {
  var alexGreeter = {}; // name space
  alexGreeter.name = "Alex";
  var greeting = "Hi";  // privato
  alexGreeter.sayHi = function () {
    console.log(greeting + alexGreeter.name);
  }
  window.alexGreeter = alexGreeter; // rende pubblico alexGreeter (e le sue proprietà)
})(window);

Lecture 53 DOM Manipulation
JavaScript in the browser wouldn't really be any fun if you wouldn't be able to manipulate the page that that JavaScript is attached to.
So in this lecture, we're going to speak about DOM manipulation, otherwise known as Document Object Model manipulation.
So the first question that comes when we start talking about DOM manipulation is
how to include your JavaScript library inside your HTML page.
And before we even start going on about where to include the script.js,
let's go ahead and learn about this special object called document.
And the document object represents the entire HTML document,
the document object model.
So we know that there is an object called window, otherwise known as this, and
it contains a whole bunch of things.
One of the things it contains is a document property. 
 the document object contains our entire HTML page.
This document object is the stepping stone for
us to be able to get at individual elements within our webpage. 
So one of the central methods that the document object has
is being able to get at the element by the id. 
now the reason we're able to use document here is because we're in the global scope.
And global scope is window.
And window has an attribute, has a property called document in it. 
Let's go ahead and console.log this.
So let's see what happens when we do that.
Let's save that, and we get null.
Well, that's kind of strange.
Why would we get null?
Why are we not getting this Lecture 53 title?
Well, the reason we're not getting it is because of when
this line is being executed.
Lo script nella sezione <head> viene eseguito quando il documento non è ancora stato elaborato dal browser, e quindi il DOM non è ancora stato creato-
So, therefore, you get null.
So how do we solve that? 
it's always best not to keep it in the head, but
actually place it at the very end of the document. 
PER ME NO!
So document is actually an instance of HTMLDocument.
So if you go on the web and look up HTMLDocument, you will be able to see all
the methods that HTMLDocument defines for you to help you manipulate the webpage. 
Se ho una textbox (<input id="idTextBox" type="text") per prendere il suo valore:
document.getElementById("idTextBox").value
Per "scrivere" sulla pagina web recupero un elemento (es, ho: <div id="content"></div>):
document.getElementById("content").textContent = "messaggio da visualizzare"
Ma se voglio mettere anche tag:
document.getElementById("content").innerHTML = "<h2>messaggio da visualizzare</h2>"

Alternativa più potente a getElementById è querySelector, che funziona come i selettori CSS:
document.querySelector("#content")

Lecture 54 Handling events
Now first of all, what are event handlers?
Well event handlers are basically functions that you
bind using specific methods to certain events that happen in the browser. 
Now those events might be triggered by just a lifecycle.
Meaning something like the page loaded.
That's an event.
Or it could be triggered by user interaction,
like a user typed a character or user clipped something. 
So one of the most simplest ways to assign an event handler to a particular element is to just use the on something attribute on that element. FA SCHIFO
Now this option comes with some side effects.
One side effects is that you kind of have to dirty up your HTML with these onclick, onblur, onkeydown and so on.
HTML is really just for content it's not for behavior. 
another way of doing this.
In this way it's called unobtrusive event binding. Nel file js:
document.querySelector("button").addEventListener("click", myFunctionHandler);
(e in myFunctionHandler, "this" punta al button!)
Oppure:
document.querySelector("button").onclick = myFunctionHandler; // SENZA ()!!!
Ma addEventListener è il migliore (per "this").
Problema manipolazione DOM se ho gli "<script>" in <head>:
window.onload
Ma qui propone:
document.addEventListener("DOMContentLoaded", function(event) {...});
This function will get executed when this Event files called, dom content loaded and that will happen before any images, or any CSS, or any other script is loaded.

Lecture 55 The 'event' argument
There's an argument that's passed by the JavaScript engine into every single event handler.
Vedi file logMouseMove.html

Lesson 56 HTTP Basics
Before we launch into discussion about AJAX, which is essentially a client-server communication technique, let's talk about the language in which the client, that is the browser, communicates with the server.
And the language that they use, otherwise known as protocol, is HTTP. 
Number one is what is HTTP?
Well HTTP stands for HyperText Transfer Protocol, HTTP.
And it's based on a request response stateless protocol.
And stateless in this context means that when the server responds
to a request from a browser,
that response does not depend on any previous requests that the browser made. 
So the way the client-server communication works is as follows.
The client, the browser usually, opens the connection to the server.
Then the client sends an HTTP request for a particular resource.
And then the server responds with an HTTP response to the client,
usually with a resource that the client requested, but
sometimes the resource is not found or some other error occurs.
And then the client,
that is again the browser usually, closes the connection to the server. 
... let's talk about how to identify a resource on the web.
The first one is Uniform Resource Name, otherwise known as URN.
What a URN is, is a way to uniquely identify a resource or
a name of a resource.
The thing though about URNs is they do not tell us how to get that resource.
And URNs are very commonly used by organizations and
institutions who want to standardize to maintain some uniqueness of a particular
resource within that organization. 
Another term is URI, and URI stands for Uniform Resource Identifier.
And what that does is uniquely identifies a resource or a location of a resource.
But even though it identifies uniquely the location of resource,
it still does not necessarily tell us how to get to that resource.
And the reason it doesn't is because within a URI,
the context is usually missing.
It's very similar to URN except the URI is much more directory
type of structure looking thing. 
The last final term is URL, and that stands for Uniform Resource Locator.
And this is something that's obviously thrown around on the web
all over the place.
When you ask somebody for a website address, it's a URL,
it's a Uniform Resource Locator.
And URL is a form of URI that provides the information on how to get that resource. 
So let's take a look at an HTTP request structure, in other words,
the actual language that the browser communicates with the server.
And this is an example of a GET request:
GET /index.html?name=John HTTP 1.1
And that command (GET) is called a method
è seguito da URI string (/index.html) e da query string (name=John)
So this is the command that the browser issues
to get at a particular resource on a website.
I'm sure, looking at it,
you could start seeing that there's something strange about this command.
Where is the website name?
How do I know it's a URI, it's not a URL?
The reason it's a URI, not a URL, is very simple.
This command is only issued once the browser actually connects to the server.
So we're already connected to coursera.org or to mysite.org.
And now that we've connected and established a connection to that
particular website, now we are asking for a URI within the context of that website.
The browser first has to make a connection to the server.
And once it makes a connection, it starts the HTTP protocol,
starts the language of communication between the browser and the server. 
One of them is, again, the GET command or the GET method.
And what that does is it says,
I want to retrieve the resource from the particular location.
And the way you pass the data using that method
is you pass it to the server as part of the URI.
As you remember, we had the query string, well, that's how you pass the data.
And the data is not so much to be stored on the server as much as really a way for
us to tell the server and identify a particular resource, or
maybe filter a particular resource, the data from that particular resource.
So we need to pass the data to the server in order to get the data back.
It's not really for the server to store it, necessarily. 
The other command, or the other method, HTTP method, is POST.
And this method sends the data to the server in order to be processed.
And the data that you sent to the server is sent in the message body.
Now the server may still respond, and most of the time does,
respond with some sort of response, maybe an HTML page, maybe some sort of data.
But that data is more viewed as a status or kind of a confirmation that
the data that you sent to the server was in fact processed, whatever that means. 
So this is a typical POST request, and
you could see there's a POST /index.html, but there's no query string:
POST /index.html HTTP 1.1
Host: coursera.org
Accept-Charset: utf8
name=John
The query string or
the data that we're passing comes as part of the body of the message.
So there's a few parts here that actually exist on pretty much every POST request,
which is the first line, the POST request itself, followed by some request headers.
In this example, Accept-Charset is telling the server that our
browser knows how to process utf-8 character set.
And, after that, we have the message body.
This is where the data is being passed to the server. 
Well, it starts with just a response status line.
And the response status line has three components.
The first one is the HTTP version.
So the server spits back out the version of HTTP it's communicating.
The second is the response status code.
And the third is the English phrase describing that status code.
And all three parts are separated by a single space.
So a typical HTTP response may look something like this.
It will start with HTTP/1.1 200 OK.
It will follow by some HTTP response headers,
in this case, it will tell you what the date of this document is.
It will tell you the content type, in this case, it's text in HTML.
And then the body of the message or the body of the response will be HTML.
Now the message body of the response need not be HTML.
It can be, for example, plain text, XML, or
JSON.
So let me show you some common response status code.
One of them is 200 OK.
And that basically means that the server is saying, okay, I got your request,
and here's the content you requested.
Another one is 404 Not Found.
In this case,
the server says, I just can't find the resource that you requested.
403 Forbidden, and that means that, for whatever reason,
the server thinks that the client, your browser, is unauthenticated and
tries to access a secure resource that requires some sort of username and
password or a certificate or something like that.
And another one, pretty common, is 500 Internal Server Error, and
usually that happens when some error was raised on the server and
was unhandled on the server and it kind of spilled over. 
Now remember, the GET method sends the data to the server as part of the URL or
part of the URI.
That's going to be important for us as we move forward.
And the POST method sends the data as part of the message body.
And some common response codes are 200, that's fine, the data is coming,
404, it's not found, 500, there's some internal server error. 

Lesson 57 Ajax Basics
So what is Ajax exactly?
Well the word Ajax used to stand for Asynchronous Javascript and XML.
The thing though is while Ajax started with XML, and
that was the data type that was being sent over the wire browser and
the server back and forth, very few apps actually use it nowadays.
Instead, most of the time nowadays, plain text sometimes is just regular HTML and
then JSON, which we're going to talk about later, is used instead of XML. 
Now why does Ajax exist to begin with?
Well we can answer that question by taking a look
at how traditional web applications worked and what their flow was like.
A traditional web application started with a web page and
usually a user is going to press a button, and
that is going to generate an HTTP request that is going to be sent to the server.
And the server is going to respond with some response,
which is going to be a whole new page, and
that whole new page could be basically one 99% identical to the original page.
And there might be only one string really that changed between the first page and
the second page.
But in the traditional Web App Flow, the entire page with all the same
elements need to be returned anyway just to display a minor update. 
Now in the Ajax web app flow, you have a web page and
it also makes an HTTP request.
And that is usually sent by Javascript, and
that HTTP request is sent by Javascript.
And the server also replies, and
its response is a small piece of data that's inserted, usually,
into a current page, and the only thing that changes is some minor piece of data.
Now obviously, this is way faster.
The response is faster, you use less bandwidth,
because only one small piece of data is returned.
And obviously, it's a much nicer user experience, as well.
Now, before we through the process of how Ajax works,
let's remind ourselves what is synchronous versus asynchronous execution
since Ajax has asynchronous as its first word. 
Well synchronous execution is execution of one programming instruction at a time.
What that means is that you can't start execution of another instruction
until the first instruction has finished its execution.
On the other hand, on the asynchronous execution, what that means is that
it's execution of more than one programming instruction at a time.
Asynchronous instruction returns right away.
It sends off its instruction and it's ready to execute the next one right away.
And the actual execution of that asynchronous instruction
is really done in a separate thread process. 
Ci sono parecchi componenti nel brovser ...
And while the Javascript engine itself is synchronous,
HTTP requestor is certainly not.
HTTP requestor is asynchronous. 
So armed with this knowledge, let's take a look at the AJAX process.
So we have the Javascript engine and we have this HTTP requestor component, and
the Javascript engine is going to have some Javascript line of
code being executed.
Then another Javascript line of code being executed.
Then finally it comes to a Javascript line that executes an Ajax request.
So what happens at that point?
Well at that point, the Ajax request uses a special Javascript object
to reach out to the HTTP requester component.
And notice what I am indicating here on the slide
is that the next line of Javascript code executes it right away.
The response of the HTTP requestor is not waited on.
Instead, when we make the actual Ajax request and reach out to this HTTP
requestor component, along with our request, we pass in an address
of a Javascript function that is going to serve as the response handler for
when the response from the other server or this HTTP requestor comes back.
However, meanwhile, we continue on our merry way, and
the Javascript engine keeps executing one line at a time.
At certain point, it's executed all the code it can, and
its execution stack is empty.
Even that point, the HTTP requestor is done and
has received its response from our server, it may, at that point,
use that address of that Javascript function that we gave it to start with and
reach out back to the Javascript engine and execute the handling of the response.
And that's the callback function, that's the function that's going to handle
the server response, so that's the basic AJAX process. 
... nella seconda parte spiege il codice js e l'oggetto HTTPrequest, onreadystatechange, status, la callback function, send, readyState
Ricordarsi che le chiamate sono asincrone, e quindi i dati ricevuti in risposta dal server vanno usati solo dentro la funzione di callback!

Lecture 58 Processing JSON
So what is JSON?
Well, JSON stands for JavaScript Object Notation.
And what it is, it's a lightweight data interchange format.
And it's great for a couple of reasons.
Number one, is it's easy for humans to read and write JSON and
it's easy for machines to parse and generate JSON.
So in a lot of sense this is very similar to XML because it also was
pretty easy to write for machines and for humans to read and write.
But JSON notation is quite a bit simpler and shorter.
And most importantly it is just like XML, completely dependent of any language.
... sintassi
But even if you're in the browser, and you're in your JavaScript program,
you can certainly take the string and store it inside a variable.
All you have to do is put single quotes around it.
The reason you put single quotes around it is because there are already double
quotes inside of that string. 
JSON is NOT a Javascript Object Literal.
JSON is just a string.
The syntax of JSON is based on object literal but it is not one and the same.
You still need to covert between JSON and string.
If you wanted an object in Javascript, you would have to take the JSON string and
convert it to an object.
And similarly, if you want JSON, you would have to take an object and
convert it back to a JSON string.
And JavaScript provides a couple utilities for that:
var obj = JSON.parse(jsonstring);
var str = JSON.stringify(obj);

Lecture 59 Fixing Mobile Nav Menu Automatic Collapse
bah

Lecture 60 Dynamically Loading Home View Content
But for this lecture all we need to do is figure out how to insert
the previous mait page content inside the main content placeholder. 
Io procedo in modo completamente diverso dal corso:
uso Ajax tramite jquery.
In locale NON FUNZIONA: la richiesta è bloccata dalla CORS policy!
Si può risolvere installando un web server
... oppure si usa browser-sync :-) (che fa da server):
https://github.com/jhu-ep-coursera/fullstack-course4/blob/master/FAQ.md#q-i-am-getting-xmlhttprequest-cannot-load-filesomepath-error-what-am-i-doing-wrong
da cmd portarsi sulla dir del sito e dare il comando
browser-sync start --server --directory --files "*"
-> si apre nel browser predefinito una scheda sulla directory, e li fare click su index.html
In index.html tagliare il contenuto del div #main-content e incollarlo nel (nuovo) file snpIndex.html, che verrà caricato tramite chiamata Ajax al suo (precedente) posto. Questo lo si fa da js con Ajax/jQuery (v. base.js).

Lecture 61 Dynamically Loading Menu Categories View
In this lecture, we would like to dynamically insert the menu categories
when the user clicks on the menu tile.
Obviously at this point we need the data to fill up these menu categories and
also to point to these pictures that are specific to each category.
So how do we do that?
First of all, how do we get the data?
Well, there's an app that we've deployed on herokuapp.com.
And the app is called davids-restauarant.herokuapp.com/...
And basically what that is is a rest API that provides us JSON data that we need
for our application.
And even though the actual website is going to be hosted on GitHub pages, so
it's going to be GitHubPages.io or something like that.
The data is actually going to sit as this app,
as this restaurant, David's restaurant app on Heroku. 
The fact that they're hosted on two different domain names
is actually a problem.
And the reason that is a problem is because every browser comes with this
security mechanism that's called same-source or same-origin rule.
And basically, what that means is is if you load JavaScript that
tries to reach out through Ajax to any other domain name
other than the one that this particular HTML page was served from,
the browser will stop that activity and will not allow it.
CORS! E' per la sicurezza!
Now in that case how can we ever get this data?
The browser's going to stop us.
Well, comes this new technology called CORS,
otherwise known as Cross Origin Resource Sharing. 
Basically the idea of CORS is there's going to be some HTTP headers (mandati dal SERVER) that the browser will know about and will tell the browser that it is actually safe to reach out to this particular domain name and
this is exactly what's going on in the case of this David's Restaurant app.
It's actually communicating back to a browser and sending those headers telling
us even though you really shouldn't be able to reach out with the JavaScript
anywhere else you are allowed to reach out to me, and it is a safe thing to do. 
Va verso una SPA (Single Page Application).
Vedi note.txt in ristorante05

Lecture 62 Dynamically Loading Single Category View
Sempre nella logica SPA (Single Page Application), crea il codice per #mainContent relativamente a quella che sarebbe stata la pagina singleCategory.html
Vedi note.txt in ristorante06

